{% set version = "3.9.82" %}

package:
  name: ncrystal-suite
  version: {{ version }}

source:
  #fixme:
  url: https://github.com/mctools/ncrystal/archive/06537e88.tar.gz
  sha256: b203cfd6c688224d371dc6f227352e6056d1bd33c23d0710c5ca8119d633485c
  folder: src

build:
  noarch: python
  number: 0

outputs:
  - name: ncrystal-core
    script: build_core.sh  # [unix]
    script: build_core.bat  # [win]
    build:
      ignore_run_exports_from:
        - python
    requirements:
      build:
        - cmake >=3.25
        - make  # [not win]
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
      host:
        - python  # note that python is only used to convert ncmat->C++ code
      run:
        #fixme: we just want to not have an empty section for now, and nothing
        #using python
        - zlib
    test:
      requires:
        - cmake >=3.25
      commands:
        - ncrystal-config --help
        - ncrystal-config -s
        - test -f $(ncrystal-config --show libpath)
        - test -f $(ncrystal-config --show shlibpath)
        - test -d $(ncrystal-config --show includedir)
        - cmake --find-package -DNAME=NCrystal -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST

  - name: ncrystal-python
    #For some reason putting the pip install command inline here does not work,
    #so we use some scripts:
    script: build_python.sh  # [unix]
    script: build_python.bat  # [win]
    build:
      noarch: python
    entry_points:
      - nctool = NCrystal._cli_nctool:main
      - ncrystal_cif2ncmat = NCrystal._cli_cif2ncmat:main
      - ncrystal_endf2ncmat = NCrystal._cli_endf2ncmat:main
      - ncrystal_hfg2ncmat = NCrystal._cli_hfg2ncmat:main
      - ncrystal_mcstasunion = NCrystal._cli_mcstasunion:main
      - ncrystal_ncmat2cpp = NCrystal._cli_ncmat2cpp:main
      - ncrystal_ncmat2hkl = NCrystal._cli_ncmat2hkl:main
      - ncrystal_vdos2ncmat = NCrystal._cli_vdos2ncmat:main
      - ncrystal_verifyatompos = NCrystal._cli_verifyatompos:main

    requirements:
      host:
        - python
        - pip
        - setuptools >=64.0
      run:
        - python
        - numpy >=1.22
    test:
      commands:
        - python3 -c 'import os; os.environ["NCRYSTAL_SLIMPYINIT"]="1"; import NCrystal'

  - name: ncrystal
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage('ncrystal-core', max_pin="x.x.x") }}
        - {{ pin_subpackage('ncrystal-python', max_pin="x.x.x") }}
    test:
      requires:
        - cmake >=3.25
      imports:
        - NCrystal
      commands:
        - ncrystal-config --help
        - ncrystal-config -s
        - python3 -c 'import NCrystal; NCrystal.test()'
        - python3 -mNCrystal.test cmdline
        - nctool --help
        - ncrystal_cif2ncmat --help
        - ncrystal_endf2ncmat --help
        - ncrystal_hfg2ncmat --help
        - ncrystal_mcstasunion --help
        - ncrystal_ncmat2cpp --help
        - ncrystal_ncmat2hkl --help
        - ncrystal_vdos2ncmat --help
        - ncrystal_verifyatompos --help
        - nctool --test
        - cmake --find-package -DNAME=NCrystal -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST
        #Fixme: Also actually try to compile a downstream CMake project

about:
  home: https://github.com/mctools/ncrystal
  summary: Library for thermal neutron transport in crystals and other materials.
  description: |
    NCrystal is a library and toolkit for thermal neutron transport in crystals
    and other materials. It can be used standalone or as a backend for other
    Monte Carlo particle simulation frameworks.
  license: Apache-2.0
  license_family: Apache
  license_file: src/LICENSE
  doc_url: https://github.com/mctools/ncrystal/wiki
  dev_url: https://github.com/mctools/ncrystal

extra:
  recipe-maintainers:
    - tkittel
