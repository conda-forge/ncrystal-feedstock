{% set version = "4.2.6" %}

package:
  name: ncrystal-suite
  version: {{ version }}

source:
  url: https://github.com/mctools/ncrystal/archive/v{{ version }}.tar.gz
  sha256: 4e7926d8bb931cce3546e9406a2a3d9b182b864e94ce34e31b1a6d9475479602
  folder: src

build:
  noarch: python
  number: 0

outputs:
  - name: ncrystal-lib
    script: build_core.sh  # [unix]
    script: build_core.bat  # [win]
    build:
      #If building against ncrystal-core, ncrystal-core is almost always also
      #needed at runtime as well, so we could consider enabling the following:
      #run_exports:
      #  strong:
      #    - ncrystal-core
      ignore_run_exports_from:
        - python
    requirements:
      build:
        - cmake >=3.25
        - make  # [not win]
        - {{ compiler('cxx') }}
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
      host:
        # Note that python is only used to convert ncmat->C++ code,
        # hence the ignore_run_exports_from python above.
        - python
      #NB: no explicit run: dependencies!
    test:
      requires:
        - cmake >=3.25
        - make  # [not win]
        - cxx-compiler
      source_files:
        - ./src/examples/downstream_cmake
      script: test_core.sh  # [unix]
      script: test_core.bat  # [win]

  - name: ncrystal-core
    build:
      noarch: python
      script: python -m pip install "./src/ncrystal_core/empty_pypkg" -vv --no-deps --no-build-isolation
    requirements:
      build:
        - python  {{ python_min }}  # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
      host:
        - python  {{ python_min }}
        - pip
        - setuptools >=64.0
      run:
        - python >={{ python_min }}
        - ncrystal-lib ={{ version }}
    test:
      requires:
        - python {{ python_min }}
        - pip
      commands:
        - pip check
        - pip show ncrystal-core
        - conda list

  - name: ncrystal-python
    build:
      noarch: python
      script: python -m pip install "./src/ncrystal_python" -vv --no-deps --no-build-isolation
      entry_points:
        - nctool = NCrystal._cli_nctool:main
        - ncrystal_cif2ncmat = NCrystal._cli_cif2ncmat:main
        - ncrystal_endf2ncmat = NCrystal._cli_endf2ncmat:main
        - ncrystal_hfg2ncmat = NCrystal._cli_hfg2ncmat:main
        - ncrystal_mcstasunion = NCrystal._cli_mcstasunion:main
        - ncrystal_ncmat2cpp = NCrystal._cli_ncmat2cpp:main
        - ncrystal_ncmat2hkl = NCrystal._cli_ncmat2hkl:main
        - ncrystal_vdos2ncmat = NCrystal._cli_vdos2ncmat:main
        - ncrystal_verifyatompos = NCrystal._cli_verifyatompos:main
        - ncrystal_ncmat2endf = NCrystal._cli_ncmat2endf:main
    requirements:
      build:
        - python  {{ python_min }}  # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
      host:
        - python  {{ python_min }}
        - pip
        - setuptools >=64.0
      run:
        - python >={{ python_min }}
        - numpy >=1.22
    test:
      requires:
        - python {{ python_min }}
        - pip
      commands:
        - pip check
        - pip show ncrystal-python

  - name: ncrystal
    build:
      noarch: python
      script: python -m pip install "./src/ncrystal_metapkg" -vv --no-deps --no-build-isolation
    requirements:
      build:
        - python  {{ python_min }}  # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
      host:
        - python  {{ python_min }}
        - pip
        - setuptools >=64.0
      run:
        - python >={{ python_min }}
        #Exact version pinning for consistent ncrystal environment:
        - ncrystal-core ={{ version }}
        - ncrystal-python ={{ version }}
    test:
      requires:
        - python {{ python_min }}
        - pip
        - git >=2.40.0
        - cmake >=3.25
        - make  # [not win]
        - c-compiler
        - cxx-compiler
        - scikit-build-core >=0.10
        - setuptools >=64.0
        - ruff >=0.8.1
        - pyyaml >=6.0.0
        - tomli >=2.0.0
        - ase !=3.24.*
        - gemmi >=0.6.1
        - spglib >=2.1.0
        - endf-parserpy >=0.13.1
        - matplotlib-base >=3.7.0
        - mpmath >=1.3.0
      script: test_ncrystal.sh  # [unix]
      script: test_ncrystal.bat  # [win]

#  - name: ncrystal-all
#    build:
#      noarch: generic
#    requirements:
#      run:
#        #Exact version pinning for consistent ncrystal environment:
#        - ncrystal ={{ version }}
#        - ase !=3.24.*
##        - gemmi >=0.6.1
#        - spglib >=2.1.0
#        - matplotlib-base >=3.7.0
#    test:
#      requires:
#        - python {{ python_min }}
#        - pip
#      commands:
#        - pip check

about:
  home: https://github.com/mctools/ncrystal
  summary: Library for thermal neutron transport in crystals and other materials.
  description: |
    NCrystal is a library and toolkit for thermal neutron transport in crystals
    and other materials. It can be used standalone or as a backend for other
    Monte Carlo particle simulation frameworks.
  license: Apache-2.0
  license_family: Apache
  license_file: src/LICENSE
  doc_url: https://github.com/mctools/ncrystal/wiki
  dev_url: https://github.com/mctools/ncrystal

extra:
  recipe-maintainers:
    - tkittel
